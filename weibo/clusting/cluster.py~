#coding:utf-8:

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.cluster import KMeans

def cluster():
    f=open("flu.txt")
    flu =[]
    for line in f.readlines():
        flu.append(line)

    f.close()
    

    vectorizer = TfidfVectorizer(sublinear_tf= True,min_df=0,max_df=1.0,ngram_range=(1,1),smooth_idf=True,use_idf=1,strip_accents=None)
    x=vectorizer.fit_transform(flu)

    n_samples,n_features=x.shape

    print n_samples,n_features

    kmeans =KMeans(n_clusters=4, init='k-means++', n_init=10, max_iter=300, tol=0.0001, precompute_distances=True, verbose=0, random_state=None, copy_x=True, n_jobs=1)
    kmeans.fit(x)
    print kmeans.score(x)
    c=kmeans.predict(x)

    f1=open('1.txt','w')
    f2=open('2.txt','w')
    f3=open('3.txt','w')
    f4=open('4.txt','w')
    for i in range(0,len(c)):
        if c[i]== 0:
            f1.write('%s'%(flu[i]))
        elif c[i]==1:
            f2.write('%s'%(flu[i]))
        elif c[i]==2:
            f3.write('%s'%(flu[i]))
        else:
            f4.write('%s'%(flu[i]))
    f1.close()
    f2.close()
    f3.close()
    f4.close()


if __name__=="__main__":
    cluster()
